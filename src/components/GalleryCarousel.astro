---
import {Image} from "astro:assets";

// Props interface
interface ImageItem {
  src: string;
  alt?: string;
  caption?: string;
}

interface Props {
  images: ImageItem[];
  autoPlay?: boolean;
  interval?: number;
  showNavigation?: boolean;
  showDots?: boolean;
  height?: string;
}

const { 
  images, 
  autoPlay = true, 
  interval = 4000, 
  showNavigation = true, 
  showDots = true,
  height = "h-96"
} = Astro.props;

// Generate unique IDs for the carousel
const carouselId = `carousel-${Math.random().toString(36).substr(2, 9)}`;
---

<section class="py-16 bg-gradient-to-br from-amber-50 to-orange-50">
  <div class="container mx-auto px-4">
    <div class="text-center mb-12">
      <h2 class="text-4xl font-bold text-gray-900 mb-4">Our Portfolio Gallery</h2>
      <p class="text-xl text-gray-600 max-w-2xl mx-auto">
        Explore our latest interior design projects and transformations
      </p>
    </div>

    <div class="relative max-w-4xl mx-auto">
      <!-- Carousel Container -->
      <div 
        id={carouselId}
        class={`relative ${height} overflow-hidden rounded-2xl shadow-2xl`}
      >
        <!-- Images Container -->
        <div class="flex transition-transform duration-500 ease-in-out h-full">
          {images.map((image, index) => (
            <div class="min-w-full h-full relative">
              <Image
                src={image.src}
                alt={image.alt ?? "No alt"}
                class="w-full h-full object-cover"
                loading={index === 0 ? "eager" : "lazy"}
              />
              {image.caption && (
                <div class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/70 to-transparent p-6">
                  <h3 class="text-white text-xl font-semibold mb-2">{image.alt}</h3>
                  <p class="text-white/90">{image.caption}</p>
                </div>
              )}
            </div>
          ))}
        </div>

        <!-- Navigation Arrows -->
        {showNavigation && (
          <>
            <button 
              class="carousel-prev absolute left-4 top-1/2 transform -translate-y-1/2 bg-white/80 hover:bg-white text-gray-800 p-3 rounded-full shadow-lg transition-all duration-300 z-10"
              aria-label="Previous image"
            >
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
              </svg>
            </button>
            <button 
              class="carousel-next absolute right-4 top-1/2 transform -translate-y-1/2 bg-white/80 hover:bg-white text-gray-800 p-3 rounded-full shadow-lg transition-all duration-300 z-10"
              aria-label="Next image"
            >
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </button>
          </>
        )}

        <!-- Dots Navigation -->
        {showDots && (
          <div class="absolute bottom-4 left-1/2 transform -translate-x-1/2 flex space-x-2 z-10">
            {images.map((_, index) => (
              <button 
                class="carousel-dot w-3 h-3 rounded-full bg-white/60 hover:bg-white transition-all duration-300"
                data-index={index}
                aria-label={`Go to image ${index + 1}`}
              ></button>
            ))}
          </div>
        )}

        <!-- Image Counter -->
        <div class="absolute top-4 right-4 bg-black/50 text-white px-3 py-1 rounded-full text-sm z-10">
          <span class="carousel-counter">1</span> / <span class="carousel-total">{images.length}</span>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  // Carousel functionality
  function initCarousel(carouselId: string, autoPlay: boolean, interval: number) {
    const carousel = document.getElementById(carouselId);
    if (!carousel) return;

    const container = carousel.querySelector('.flex') as HTMLElement;
    const prevBtn = carousel.querySelector('.carousel-prev') as HTMLButtonElement;
    const nextBtn = carousel.querySelector('.carousel-next') as HTMLButtonElement;
    const dots = carousel.querySelectorAll('.carousel-dot') as NodeListOf<HTMLButtonElement>;
    const counter = carousel.querySelector('.carousel-counter') as HTMLElement;
    const total = carousel.querySelector('.carousel-total') as HTMLElement;

    let currentIndex = 0;
    let autoplayInterval: number | null = null;
    const totalImages = dots.length;

    function updateCarousel(index: number) {
      currentIndex = index;
      container.style.transform = `translateX(-${index * 100}%)`;
      
      // Update counter
      if (counter) counter.textContent = (index + 1).toString();
      
      // Update dots
      dots.forEach((dot, i) => {
        dot.classList.toggle('bg-white', i === index);
        dot.classList.toggle('bg-white/60', i !== index);
      });
    }

    function nextSlide() {
      const nextIndex = (currentIndex + 1) % totalImages;
      updateCarousel(nextIndex);
    }

    function prevSlide() {
      const prevIndex = (currentIndex - 1 + totalImages) % totalImages;
      updateCarousel(prevIndex);
    }

    function goToSlide(index: number) {
      updateCarousel(index);
    }

    function startAutoplay() {
      if (autoPlay && interval > 0) {
        autoplayInterval = window.setInterval(nextSlide, interval);
      }
    }

    function stopAutoplay() {
      if (autoplayInterval) {
        clearInterval(autoplayInterval);
        autoplayInterval = null;
      }
    }

    // Event listeners
    if (prevBtn) {
      prevBtn.addEventListener('click', () => {
        prevSlide();
        stopAutoplay();
        startAutoplay();
      });
    }

    if (nextBtn) {
      nextBtn.addEventListener('click', () => {
        nextSlide();
        stopAutoplay();
        startAutoplay();
      });
    }

    dots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        goToSlide(index);
        stopAutoplay();
        startAutoplay();
      });
    });

    // Pause autoplay on hover
    carousel.addEventListener('mouseenter', stopAutoplay);
    carousel.addEventListener('mouseleave', startAutoplay);

    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      if (carousel.contains(document.activeElement)) {
        if (e.key === 'ArrowLeft') {
          e.preventDefault();
          prevSlide();
          stopAutoplay();
          startAutoplay();
        } else if (e.key === 'ArrowRight') {
          e.preventDefault();
          nextSlide();
          stopAutoplay();
          startAutoplay();
        }
      }
    });

    // Touch/swipe support
    let startX = 0;
    let endX = 0;

    carousel.addEventListener('touchstart', (e) => {
      startX = e.touches[0].clientX;
    });

    carousel.addEventListener('touchend', (e) => {
      endX = e.changedTouches[0].clientX;
      const diff = startX - endX;
      
      if (Math.abs(diff) > 50) { // Minimum swipe distance
        if (diff > 0) {
          nextSlide();
        } else {
          prevSlide();
        }
        stopAutoplay();
        startAutoplay();
      }
    });

    // Initialize
    updateCarousel(0);
    startAutoplay();
  }

  // Initialize all carousels on the page
  document.addEventListener('DOMContentLoaded', () => {
    const carousels = document.querySelectorAll('[id^="carousel-"]');
    carousels.forEach(carousel => {
      const autoPlay = carousel.getAttribute('data-autoplay') !== 'false';
      const interval = parseInt(carousel.getAttribute('data-interval') || '4000');
      initCarousel(carousel.id, autoPlay, interval);
    });
  });
</script>

<style>
  /* Smooth transitions */
  .carousel-prev:hover,
  .carousel-next:hover {
    transform: translateY(-50%) scale(1.1);
  }

  .carousel-dot:hover {
    transform: scale(1.2);
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .carousel-prev,
    .carousel-next {
      padding: 0.5rem;
    }
    
    .carousel-prev svg,
    .carousel-next svg {
      width: 1.25rem;
      height: 1.25rem;
    }
  }
</style>
